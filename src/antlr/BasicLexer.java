// Generated from ./BasicLexer.g4 by ANTLR 4.4
package antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BasicLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		PLUS=1, MINUS=2, MULT=3, DIV=4, MOD=5, GT=6, GTE=7, LT=8, LTE=9, EQ=10, 
		NEQ=11, AND=12, OR=13, NOT=14, NEG=15, LEN=16, ORD=17, CHR=18, IDENT=19, 
		COMMA=20, ASSIGN=21, SEMICOLON=22, WS=23, NEWPAIR=24, FST=25, SND=26, 
		CALL=27, PAIR=28, BOOL=29, CHAR=30, STRING=31, INT=32, SKIP=33, READ=34, 
		FREE=35, RETURN=36, EXIT=37, PRINT=38, PRINTLN=39, IF=40, THEN=41, ELSE=42, 
		FI=43, WHILE=44, DO=45, DONE=46, BEGIN=47, END=48, IS=49, OPEN_PARENTHESES=50, 
		CLOSE_PARENTHESES=51, OPEN_SQPARENTHESES=52, CLOSE_SQPARENTHESES=53, INTEGER=54, 
		CHARLITER=55, STRINGLITER=56, BOOLLITER=57, PAIRLITER=58;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "':'"
	};
	public static final String[] ruleNames = {
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "GT", "GTE", "LT", "LTE", "EQ", 
		"NEQ", "AND", "OR", "NOT", "NEG", "LEN", "ORD", "CHR", "IDENT", "COMMA", 
		"ASSIGN", "SEMICOLON", "WS", "NEWPAIR", "FST", "SND", "CALL", "PAIR", 
		"BOOL", "CHAR", "STRING", "INT", "SKIP", "READ", "FREE", "RETURN", "EXIT", 
		"PRINT", "PRINTLN", "IF", "THEN", "ELSE", "FI", "WHILE", "DO", "DONE", 
		"BEGIN", "END", "IS", "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "OPEN_SQPARENTHESES", 
		"CLOSE_SQPARENTHESES", "DIGIT", "SIGN", "INTEGER", "LETTER", "ESCCHAR", 
		"CHARLITER", "STRINGLITER", "BOOLLITER", "PAIRLITER"
	};


	public BasicLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "BasicLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2<\u017e\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3"+
		"\b\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16"+
		"\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23"+
		"\3\23\3\23\3\23\3\24\3\24\7\24\u00b2\n\24\f\24\16\24\u00b5\13\24\3\25"+
		"\3\25\3\26\3\26\3\27\3\27\3\30\6\30\u00be\n\30\r\30\16\30\u00bf\3\30\3"+
		"\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3"+
		"\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36\3"+
		"\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3!\3"+
		"!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3%\3%\3%\3%"+
		"\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3("+
		"\3(\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\3-\3-\3-\3-\3-\3-"+
		"\3.\3.\3.\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61"+
		"\3\61\3\62\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67"+
		"\38\38\39\59\u0154\n9\39\69\u0157\n9\r9\169\u0158\3:\3:\3;\3;\3<\3<\3"+
		"<\3<\3<\5<\u0164\n<\3=\3=\7=\u0168\n=\f=\16=\u016b\13=\3=\3=\3>\3>\3>"+
		"\3>\3>\3>\3>\3>\3>\5>\u0178\n>\3?\3?\3?\3?\3?\2\2@\3\3\5\4\7\5\t\6\13"+
		"\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'"+
		"\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'"+
		"M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m\2o\2q8s\2u\2w9y:{;}"+
		"<\3\2\b\5\2C\\aac|\6\2\62;C\\aac|\4\2\13\13\"\"\4\2--//\6\2\"\"C\\aac"+
		"|\b\2\2\2\n\f\16\17$$))^^\u0180\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2"+
		"\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2"+
		"\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2"+
		"\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2"+
		"\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2"+
		"\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2"+
		"\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O"+
		"\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2"+
		"\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2"+
		"\2i\3\2\2\2\2k\3\2\2\2\2q\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2}"+
		"\3\2\2\2\3\177\3\2\2\2\5\u0081\3\2\2\2\7\u0083\3\2\2\2\t\u0085\3\2\2\2"+
		"\13\u0087\3\2\2\2\r\u0089\3\2\2\2\17\u008b\3\2\2\2\21\u008e\3\2\2\2\23"+
		"\u0090\3\2\2\2\25\u0093\3\2\2\2\27\u0096\3\2\2\2\31\u0099\3\2\2\2\33\u009c"+
		"\3\2\2\2\35\u009f\3\2\2\2\37\u00a1\3\2\2\2!\u00a3\3\2\2\2#\u00a7\3\2\2"+
		"\2%\u00ab\3\2\2\2\'\u00af\3\2\2\2)\u00b6\3\2\2\2+\u00b8\3\2\2\2-\u00ba"+
		"\3\2\2\2/\u00bd\3\2\2\2\61\u00c3\3\2\2\2\63\u00cb\3\2\2\2\65\u00cf\3\2"+
		"\2\2\67\u00d3\3\2\2\29\u00d8\3\2\2\2;\u00dd\3\2\2\2=\u00e2\3\2\2\2?\u00e7"+
		"\3\2\2\2A\u00ee\3\2\2\2C\u00f2\3\2\2\2E\u00f7\3\2\2\2G\u00fc\3\2\2\2I"+
		"\u0101\3\2\2\2K\u0108\3\2\2\2M\u010d\3\2\2\2O\u0113\3\2\2\2Q\u011b\3\2"+
		"\2\2S\u011e\3\2\2\2U\u0123\3\2\2\2W\u0128\3\2\2\2Y\u012b\3\2\2\2[\u0131"+
		"\3\2\2\2]\u0134\3\2\2\2_\u0139\3\2\2\2a\u013f\3\2\2\2c\u0143\3\2\2\2e"+
		"\u0146\3\2\2\2g\u0148\3\2\2\2i\u014a\3\2\2\2k\u014c\3\2\2\2m\u014e\3\2"+
		"\2\2o\u0150\3\2\2\2q\u0153\3\2\2\2s\u015a\3\2\2\2u\u015c\3\2\2\2w\u0163"+
		"\3\2\2\2y\u0165\3\2\2\2{\u0177\3\2\2\2}\u0179\3\2\2\2\177\u0080\7-\2\2"+
		"\u0080\4\3\2\2\2\u0081\u0082\7/\2\2\u0082\6\3\2\2\2\u0083\u0084\7,\2\2"+
		"\u0084\b\3\2\2\2\u0085\u0086\7\61\2\2\u0086\n\3\2\2\2\u0087\u0088\7\'"+
		"\2\2\u0088\f\3\2\2\2\u0089\u008a\7@\2\2\u008a\16\3\2\2\2\u008b\u008c\7"+
		"@\2\2\u008c\u008d\7?\2\2\u008d\20\3\2\2\2\u008e\u008f\7>\2\2\u008f\22"+
		"\3\2\2\2\u0090\u0091\7>\2\2\u0091\u0092\7?\2\2\u0092\24\3\2\2\2\u0093"+
		"\u0094\7?\2\2\u0094\u0095\7?\2\2\u0095\26\3\2\2\2\u0096\u0097\7#\2\2\u0097"+
		"\u0098\7?\2\2\u0098\30\3\2\2\2\u0099\u009a\7(\2\2\u009a\u009b\7(\2\2\u009b"+
		"\32\3\2\2\2\u009c\u009d\7~\2\2\u009d\u009e\7~\2\2\u009e\34\3\2\2\2\u009f"+
		"\u00a0\7#\2\2\u00a0\36\3\2\2\2\u00a1\u00a2\7/\2\2\u00a2 \3\2\2\2\u00a3"+
		"\u00a4\7n\2\2\u00a4\u00a5\7g\2\2\u00a5\u00a6\7p\2\2\u00a6\"\3\2\2\2\u00a7"+
		"\u00a8\7q\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa\7f\2\2\u00aa$\3\2\2\2\u00ab"+
		"\u00ac\7e\2\2\u00ac\u00ad\7j\2\2\u00ad\u00ae\7t\2\2\u00ae&\3\2\2\2\u00af"+
		"\u00b3\t\2\2\2\u00b0\u00b2\t\3\2\2\u00b1\u00b0\3\2\2\2\u00b2\u00b5\3\2"+
		"\2\2\u00b3\u00b1\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4(\3\2\2\2\u00b5\u00b3"+
		"\3\2\2\2\u00b6\u00b7\7.\2\2\u00b7*\3\2\2\2\u00b8\u00b9\7?\2\2\u00b9,\3"+
		"\2\2\2\u00ba\u00bb\7=\2\2\u00bb.\3\2\2\2\u00bc\u00be\t\4\2\2\u00bd\u00bc"+
		"\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00bd\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0"+
		"\u00c1\3\2\2\2\u00c1\u00c2\b\30\2\2\u00c2\60\3\2\2\2\u00c3\u00c4\7p\2"+
		"\2\u00c4\u00c5\7g\2\2\u00c5\u00c6\7y\2\2\u00c6\u00c7\7r\2\2\u00c7\u00c8"+
		"\7c\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca\7t\2\2\u00ca\62\3\2\2\2\u00cb\u00cc"+
		"\7h\2\2\u00cc\u00cd\7u\2\2\u00cd\u00ce\7v\2\2\u00ce\64\3\2\2\2\u00cf\u00d0"+
		"\7u\2\2\u00d0\u00d1\7p\2\2\u00d1\u00d2\7f\2\2\u00d2\66\3\2\2\2\u00d3\u00d4"+
		"\7e\2\2\u00d4\u00d5\7c\2\2\u00d5\u00d6\7n\2\2\u00d6\u00d7\7n\2\2\u00d7"+
		"8\3\2\2\2\u00d8\u00d9\7r\2\2\u00d9\u00da\7c\2\2\u00da\u00db\7k\2\2\u00db"+
		"\u00dc\7t\2\2\u00dc:\3\2\2\2\u00dd\u00de\7d\2\2\u00de\u00df\7q\2\2\u00df"+
		"\u00e0\7q\2\2\u00e0\u00e1\7n\2\2\u00e1<\3\2\2\2\u00e2\u00e3\7e\2\2\u00e3"+
		"\u00e4\7j\2\2\u00e4\u00e5\7c\2\2\u00e5\u00e6\7t\2\2\u00e6>\3\2\2\2\u00e7"+
		"\u00e8\7u\2\2\u00e8\u00e9\7v\2\2\u00e9\u00ea\7t\2\2\u00ea\u00eb\7k\2\2"+
		"\u00eb\u00ec\7p\2\2\u00ec\u00ed\7i\2\2\u00ed@\3\2\2\2\u00ee\u00ef\7k\2"+
		"\2\u00ef\u00f0\7p\2\2\u00f0\u00f1\7v\2\2\u00f1B\3\2\2\2\u00f2\u00f3\7"+
		"u\2\2\u00f3\u00f4\7m\2\2\u00f4\u00f5\7k\2\2\u00f5\u00f6\7r\2\2\u00f6D"+
		"\3\2\2\2\u00f7\u00f8\7t\2\2\u00f8\u00f9\7g\2\2\u00f9\u00fa\7c\2\2\u00fa"+
		"\u00fb\7f\2\2\u00fbF\3\2\2\2\u00fc\u00fd\7h\2\2\u00fd\u00fe\7t\2\2\u00fe"+
		"\u00ff\7g\2\2\u00ff\u0100\7g\2\2\u0100H\3\2\2\2\u0101\u0102\7t\2\2\u0102"+
		"\u0103\7g\2\2\u0103\u0104\7v\2\2\u0104\u0105\7w\2\2\u0105\u0106\7t\2\2"+
		"\u0106\u0107\7p\2\2\u0107J\3\2\2\2\u0108\u0109\7g\2\2\u0109\u010a\7z\2"+
		"\2\u010a\u010b\7k\2\2\u010b\u010c\7v\2\2\u010cL\3\2\2\2\u010d\u010e\7"+
		"r\2\2\u010e\u010f\7t\2\2\u010f\u0110\7k\2\2\u0110\u0111\7p\2\2\u0111\u0112"+
		"\7v\2\2\u0112N\3\2\2\2\u0113\u0114\7r\2\2\u0114\u0115\7t\2\2\u0115\u0116"+
		"\7k\2\2\u0116\u0117\7p\2\2\u0117\u0118\7v\2\2\u0118\u0119\7n\2\2\u0119"+
		"\u011a\7p\2\2\u011aP\3\2\2\2\u011b\u011c\7k\2\2\u011c\u011d\7h\2\2\u011d"+
		"R\3\2\2\2\u011e\u011f\7v\2\2\u011f\u0120\7j\2\2\u0120\u0121\7g\2\2\u0121"+
		"\u0122\7p\2\2\u0122T\3\2\2\2\u0123\u0124\7g\2\2\u0124\u0125\7n\2\2\u0125"+
		"\u0126\7u\2\2\u0126\u0127\7g\2\2\u0127V\3\2\2\2\u0128\u0129\7h\2\2\u0129"+
		"\u012a\7k\2\2\u012aX\3\2\2\2\u012b\u012c\7y\2\2\u012c\u012d\7j\2\2\u012d"+
		"\u012e\7k\2\2\u012e\u012f\7n\2\2\u012f\u0130\7g\2\2\u0130Z\3\2\2\2\u0131"+
		"\u0132\7f\2\2\u0132\u0133\7q\2\2\u0133\\\3\2\2\2\u0134\u0135\7f\2\2\u0135"+
		"\u0136\7q\2\2\u0136\u0137\7p\2\2\u0137\u0138\7g\2\2\u0138^\3\2\2\2\u0139"+
		"\u013a\7d\2\2\u013a\u013b\7g\2\2\u013b\u013c\7i\2\2\u013c\u013d\7k\2\2"+
		"\u013d\u013e\7p\2\2\u013e`\3\2\2\2\u013f\u0140\7g\2\2\u0140\u0141\7p\2"+
		"\2\u0141\u0142\7f\2\2\u0142b\3\2\2\2\u0143\u0144\7k\2\2\u0144\u0145\7"+
		"u\2\2\u0145d\3\2\2\2\u0146\u0147\7*\2\2\u0147f\3\2\2\2\u0148\u0149\7+"+
		"\2\2\u0149h\3\2\2\2\u014a\u014b\7]\2\2\u014bj\3\2\2\2\u014c\u014d\7_\2"+
		"\2\u014dl\3\2\2\2\u014e\u014f\4\62;\2\u014fn\3\2\2\2\u0150\u0151\t\5\2"+
		"\2\u0151p\3\2\2\2\u0152\u0154\5o8\2\u0153\u0152\3\2\2\2\u0153\u0154\3"+
		"\2\2\2\u0154\u0156\3\2\2\2\u0155\u0157\5m\67\2\u0156\u0155\3\2\2\2\u0157"+
		"\u0158\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159r\3\2\2\2"+
		"\u015a\u015b\t\6\2\2\u015bt\3\2\2\2\u015c\u015d\t\7\2\2\u015dv\3\2\2\2"+
		"\u015e\u015f\7)\2\2\u015f\u0160\5s:\2\u0160\u0161\7)\2\2\u0161\u0164\3"+
		"\2\2\2\u0162\u0164\5u;\2\u0163\u015e\3\2\2\2\u0163\u0162\3\2\2\2\u0164"+
		"x\3\2\2\2\u0165\u0169\7$\2\2\u0166\u0168\5s:\2\u0167\u0166\3\2\2\2\u0168"+
		"\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\3\2"+
		"\2\2\u016b\u0169\3\2\2\2\u016c\u016d\7$\2\2\u016dz\3\2\2\2\u016e\u016f"+
		"\7v\2\2\u016f\u0170\7t\2\2\u0170\u0171\7w\2\2\u0171\u0178\7g\2\2\u0172"+
		"\u0173\7h\2\2\u0173\u0174\7c\2\2\u0174\u0175\7n\2\2\u0175\u0176\7u\2\2"+
		"\u0176\u0178\7g\2\2\u0177\u016e\3\2\2\2\u0177\u0172\3\2\2\2\u0178|\3\2"+
		"\2\2\u0179\u017a\7p\2\2\u017a\u017b\7w\2\2\u017b\u017c\7n\2\2\u017c\u017d"+
		"\7n\2\2\u017d~\3\2\2\2\n\2\u00b3\u00bf\u0153\u0158\u0163\u0169\u0177\3"+
		"\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}